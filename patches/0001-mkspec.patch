From 42f783620ceba7e0ed328fa8ef286d4232350e39 Mon Sep 17 00:00:00 2001
From: Dorian Stoll <dorian.stoll@tmsp.io>
Date: Thu, 25 Apr 2019 19:51:35 +0200
Subject: [PATCH] mkspec

Signed-off-by: Dorian Stoll <dorian.stoll@tmsp.io>
---
 scripts/package/mkspec | 253 +++++++++++++++++++++++++----------------
 1 file changed, 157 insertions(+), 96 deletions(-)

diff --git a/scripts/package/mkspec b/scripts/package/mkspec
index 009147d4718e..65f3bf49aa61 100755
--- a/scripts/package/mkspec
+++ b/scripts/package/mkspec
@@ -11,16 +11,7 @@
 
 # how we were called determines which rpms we build and how we build them
 if [ "$1" = prebuilt ]; then
-	S=DEL
 	MAKE="$MAKE -f $srctree/Makefile"
-else
-	S=
-fi
-
-if grep -q CONFIG_MODULES=y .config; then
-	M=
-else
-	M=DEL
 fi
 
 if grep -q CONFIG_DRM=y .config; then
@@ -28,120 +19,190 @@ if grep -q CONFIG_DRM=y .config; then
 fi
 
 PROVIDES="$PROVIDES kernel-$KERNELRELEASE"
-__KERNELRELEASE=$(echo $KERNELRELEASE | sed -e "s/-/_/g")
-EXCLUDES="$RCS_TAR_IGNORE --exclude=.tmp_versions --exclude=*vmlinux* \
---exclude=*.o --exclude=*.ko --exclude=*.cmd --exclude=Documentation \
---exclude=.config.old --exclude=.missing-syscalls.d"
+KERNELVERSION=$(echo $KERNELRELEASE | cut -d'-' -f1)
+KERNELNAME=$(echo $KERNELRELEASE | sed "s|$KERNELVERSION-||g")
+KERNELBUILD=$(cat .version 2>/dev/null || echo 1)
 
 # We can label the here-doc lines for conditional output to the spec file
 #
 # Labels:
 #  $S: this line is enabled only when building source package
 #  $M: this line is enabled only when CONFIG_MODULES is enabled
-sed -e '/^DEL/d' -e 's/^\t*//' <<EOF
-	Name: kernel
-	Summary: The Linux Kernel
-	Version: $__KERNELRELEASE
-	Release: $(cat .version 2>/dev/null || echo 1)
+sed -e 's/^\t*//'  <<EOF
+	Name: kernel-surface
+	Summary: The Linux Kernel with jakedays patches for Microsoft Surface
+	Version: $KERNELVERSION
+	Release: $KERNELBUILD
 	License: GPL
 	Group: System Environment/Kernel
 	Vendor: The Linux Community
 	URL: http://www.kernel.org
-$S	Source: kernel-$__KERNELRELEASE.tar.gz
 	Provides: $PROVIDES
 	%define __spec_install_post /usr/lib/rpm/brp-compress || :
 	%define debug_package %{nil}
 
 	%description
-	The Linux Kernel, the operating system core itself
-
-	%package headers
-	Summary: Header files for the Linux kernel for use by glibc
-	Group: Development/System
-	Obsoletes: kernel-headers
-	Provides: kernel-headers = %{version}
-	%description headers
-	Kernel-headers includes the C header files that specify the interface
-	between the Linux kernel and userspace libraries and programs.  The
-	header files define structures and constants that are needed for
-	building most standard programs and are also needed for rebuilding the
-	glibc package.
-
-$S$M	%package devel
-$S$M	Summary: Development package for building kernel modules to match the $__KERNELRELEASE kernel
-$S$M	Group: System Environment/Kernel
-$S$M	AutoReqProv: no
-$S$M	%description -n kernel-devel
-$S$M	This package provides kernel headers and makefiles sufficient to build modules
-$S$M	against the $__KERNELRELEASE kernel package.
-$S$M
-$S	%prep
-$S	%setup -q
-$S
-$S	%build
-$S	$MAKE %{?_smp_mflags} KBUILD_BUILD_VERSION=%{release}
-$S
+	The Linux Kernel, the operating system core itself, with support for Microsoft Surface by jakeday.
+
+	%package devel
+	Summary: Development package for building kernel modules to match the $KERNELRELEASE kernel
+	Group: System Environment/Kernel
+	AutoReqProv: no
+	%description -n kernel-surface-devel
+	This package provides kernel headers and makefiles sufficient to build modules
+	against the $KERNELRELEASE kernel package.
+
+	%prep
+
 	%install
 	mkdir -p %{buildroot}/boot
-	%ifarch ia64
-	mkdir -p %{buildroot}/boot/efi
-	cp \$($MAKE image_name) %{buildroot}/boot/efi/vmlinuz-$KERNELRELEASE
-	ln -s efi/vmlinuz-$KERNELRELEASE %{buildroot}/boot/
-	%else
-	cp \$($MAKE image_name) %{buildroot}/boot/vmlinuz-$KERNELRELEASE
-	%endif
-$M	$MAKE %{?_smp_mflags} INSTALL_MOD_PATH=%{buildroot} modules_install
-	$MAKE %{?_smp_mflags} INSTALL_HDR_PATH=%{buildroot}/usr headers_install
-	cp System.map %{buildroot}/boot/System.map-$KERNELRELEASE
-	cp .config %{buildroot}/boot/config-$KERNELRELEASE
-	bzip2 -9 --keep vmlinux
-	mv vmlinux.bz2 %{buildroot}/boot/vmlinux-$KERNELRELEASE.bz2
-$S$M	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/build
-$S$M	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/source
-$S$M	mkdir -p %{buildroot}/usr/src/kernels/$KERNELRELEASE
-$S$M	tar cf - $EXCLUDES . | tar xf - -C %{buildroot}/usr/src/kernels/$KERNELRELEASE
-$S$M	cd %{buildroot}/lib/modules/$KERNELRELEASE
-$S$M	ln -sf /usr/src/kernels/$KERNELRELEASE build
-$S$M	ln -sf /usr/src/kernels/$KERNELRELEASE source
+	# Override \$(mod-fw) because we don't want it to install any firmware
+	# we'll get it from the linux-firmware package and we don't want conflicts
+	$MAKE %{?_smp_mflags} INSTALL_MOD_PATH=%{buildroot} modules_install KERNELRELEASE=$KERNELRELEASE mod-fw=
+	install -m 755 \$($MAKE image_name) %{buildroot}/boot/vmlinuz-$KERNELRELEASE
+	install -m 755 \$($MAKE image_name) %{buildroot}/lib/modules/$KERNELRELEASE/vmlinuz
+	install -m 644 System.map %{buildroot}/lib/modules/$KERNELRELEASE/System.map
+	install -m 644 .config %{buildroot}/lib/modules/$KERNELRELEASE/config
+	install -m 644 System.map %{buildroot}/boot/System.map-$KERNELRELEASE
+	install -m 644 .config %{buildroot}/boot/config-$KERNELRELEASE
 
-	%clean
-	rm -rf %{buildroot}
+	# hmac sign the kernel for FIPS
+	sha512hmac %{buildroot}/boot/vmlinuz-$KERNELRELEASE | sed -e "s,%{buildroot},," > %{buildroot}/boot/.vmlinuz-$KERNELRELEASE.hmac
+	cp %{buildroot}/boot/.vmlinuz-$KERNELRELEASE.hmac %{buildroot}/lib/modules/$KERNELRELEASE/.vmlinuz.hmac
 
-	%post
-	if [ -x /sbin/installkernel -a -r /boot/vmlinuz-$KERNELRELEASE -a -r /boot/System.map-$KERNELRELEASE ]; then
-	cp /boot/vmlinuz-$KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm
-	cp /boot/System.map-$KERNELRELEASE /boot/.System.map-$KERNELRELEASE-rpm
-	rm -f /boot/vmlinuz-$KERNELRELEASE /boot/System.map-$KERNELRELEASE
-	/sbin/installkernel $KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm
-	rm -f /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm
+	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/build
+	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/source
+	mkdir -p %{buildroot}/lib/modules/$KERNELRELEASE/build
+	(cd %{buildroot}/lib/modules/$KERNELRELEASE ; ln -s build source)
+
+	# first copy everything
+	cp --parents \$(find  -type f -name "Makefile*" -o -name "Kconfig*") %{buildroot}/lib/modules/$KERNELRELEASE/build
+	cp Module.symvers %{buildroot}/lib/modules/$KERNELRELEASE/build
+	cp System.map %{buildroot}/lib/modules/$KERNELRELEASE/build
+	if [ -s Module.markers ]; then
+		cp Module.markers %{buildroot}/lib/modules/$KERNELRELEASE/build
 	fi
 
-	%preun
-	if [ -x /sbin/new-kernel-pkg ]; then
-	new-kernel-pkg --remove $KERNELRELEASE --rminitrd --initrdfile=/boot/initramfs-$KERNELRELEASE.img
-	elif [ -x /usr/bin/kernel-install ]; then
-	kernel-install remove $KERNELRELEASE
+	# then drop all but the needed Makefiles/Kconfig files
+	rm -rf %{buildroot}/lib/modules/$KERNELRELEASE/build/Documentation
+	rm -rf %{buildroot}/lib/modules/$KERNELRELEASE/build/scripts
+	rm -rf %{buildroot}/lib/modules/$KERNELRELEASE/build/include
+	cp .config %{buildroot}/lib/modules/$KERNELRELEASE/build
+	cp -a scripts %{buildroot}/lib/modules/$KERNELRELEASE/build
+
+	if [ -f tools/objtool/objtool ]; then
+		cp -a tools/objtool/objtool %{buildroot}/lib/modules/$KERNELRELEASE/build/tools/objtool/ || :
+
+		# these are a few files associated with objtool
+		cp -a --parents tools/build/Build.include %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/build/Build %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/build/fixdep.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/scripts/utilities.mak %{buildroot}/lib/modules/$KERNELRELEASE/build/
+
+		# also more than necessary but it's not that many more files
+		cp -a --parents tools/objtool/* %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/lib/str_error_r.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/lib/string.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+		cp -a --parents tools/lib/subcmd/* %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	fi
+
+	if [ -d arch/x86/scripts ]; then
+		cp -a arch/x86/scripts %{buildroot}/lib/modules/$KERNELRELEASE/build/arch/%{_arch} || :
+	fi
+
+	if [ -f arch/x86/*lds ]; then
+		cp -a arch/x86/*lds %{buildroot}/lib/modules/$KERNELRELEASE/build/arch/%{_arch}/ || :
+	fi
+
+	if [ -f arch/%{asmarch}/kernel/module.lds ]; then
+		cp -a --parents arch/%{asmarch}/kernel/module.lds %{buildroot}/lib/modules/$KERNELRELEASE/build/
 	fi
 
-	%postun
-	if [ -x /sbin/update-bootloader ]; then
-	/sbin/update-bootloader --remove $KERNELRELEASE
+	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/build/scripts/*.o
+	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/build/scripts/*/*.o
+
+	if [ -d arch/x86/include ]; then
+		cp -a --parents arch/x86/include %{buildroot}/lib/modules/$KERNELRELEASE/build/
 	fi
 
+	cp -a include %{buildroot}/lib/modules/$KERNELRELEASE/build/include
+
+	# files for 'make prepare' to succeed with kernel-devel
+	cp -a --parents arch/x86/entry/syscalls/syscall_32.tbl %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/entry/syscalls/syscalltbl.sh %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/entry/syscalls/syscallhdr.sh %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/entry/syscalls/syscall_64.tbl %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/tools/relocs_32.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/tools/relocs_64.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/tools/relocs.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/tools/relocs_common.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/tools/relocs.h %{buildroot}/lib/modules/$KERNELRELEASE/build/
+
+	# Yes this is more includes than we probably need. Feel free to sort out
+	# dependencies if you so choose.
+	cp -a --parents tools/include/* %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/purgatory/purgatory.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/purgatory/stack.S %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/purgatory/setup-x86_64.S %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/purgatory/entry64.S %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/boot/string.h %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/boot/string.c %{buildroot}/lib/modules/$KERNELRELEASE/build/
+	cp -a --parents arch/x86/boot/ctype.h %{buildroot}/lib/modules/$KERNELRELEASE/build/
+
+	# Make sure the Makefile and version.h have a matching timestamp so that
+	# external modules can be built
+	touch -r %{buildroot}/lib/modules/$KERNELRELEASE/build/Makefile %{buildroot}/lib/modules/$KERNELRELEASE/build/include/generated/uapi/linux/version.h
+
+	# Copy .config to include/config/auto.conf so "make prepare" is unnecessary.
+	cp %{buildroot}/lib/modules/$KERNELRELEASE/build/.config %{buildroot}/lib/modules/$KERNELRELEASE/build/include/config/auto.conf
+
+	mkdir -p %{buildroot}/usr/src/kernels
+	mv %{buildroot}/lib/modules/$KERNELRELEASE/build %{buildroot}/usr/src/kernels/$KERNELRELEASE
+
+	# This is going to create a broken link during the build, but we don't use
+	# it after this point.  We need the link to actually point to something
+	# when kernel-devel is installed, and a relative link doesn't work across
+	# the F17 UsrMove feature.
+	ln -sf /usr/src/kernels/$KERNELRELEASE %{buildroot}/lib/modules/$KERNELRELEASE/build
+
+	# prune junk from kernel-devel
+	find %{buildroot}/usr/src/kernels -name ".*.cmd" -delete
+
+	# remove files that will be auto generated by depmod at rpm -i time
+	pushd %{buildroot}/lib/modules/$KERNELRELEASE
+		rm -f modules.{alias*,builtin.bin,dep*,*map,symbols*,devname,softdep}
+	popd
+
+	# build a BLS config for this kernel
+	cat >%{buildroot}/lib/modules/$KERNELRELEASE/bls.conf <<EOC
+	title \$(. /etc/os-release && echo \$NAME) ($KERNELRELEASE) \$(. /etc/os-release && echo \$VERSION)
+	version $KERNELRELEASE
+	linux /vmlinuz-$KERNELRELEASE
+	initrd /initramfs-$KERNELRELEASE.img
+	options \\\$kernelopts
+	grub_users \\\$grub_users
+	grub_arg --unrestricted
+	grub_class kernel
+	EOC
+
+	%clean
+	rm -rf %{buildroot}
+
+	%post
+	/bin/kernel-install add $KERNELRELEASE /lib/modules/$KERNELRELEASE/vmlinuz || exit $?
+
+	%preun
+	/bin/kernel-install remove $KERNELRELEASE /lib/modules/$KERNELRELEASE/vmlinuz || exit $?
+
 	%files
 	%defattr (-, root, root)
-$M	/lib/modules/$KERNELRELEASE
-$M	%exclude /lib/modules/$KERNELRELEASE/build
-$M	%exclude /lib/modules/$KERNELRELEASE/source
-	/boot/*
+	/lib/modules/$KERNELRELEASE
+	%ghost /boot/vmlinuz-$KERNELRELEASE
+	%ghost /boot/config-$KERNELRELEASE
+	%ghost /boot/System.map-$KERNELRELEASE
+	%ghost /boot/.vmlinuz-$KERNELRELEASE.hmac
 
-	%files headers
+	%files devel
 	%defattr (-, root, root)
-	/usr/include
-$S$M
-$S$M	%files devel
-$S$M	%defattr (-, root, root)
-$S$M	/usr/src/kernels/$KERNELRELEASE
-$S$M	/lib/modules/$KERNELRELEASE/build
-$S$M	/lib/modules/$KERNELRELEASE/source
+	/usr/src/kernels/$KERNELRELEASE
 EOF
-- 
2.21.0

